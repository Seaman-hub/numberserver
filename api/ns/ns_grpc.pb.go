// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ns

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NumberServerClient is the client API for NumberServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NumberServerClient interface {
	// GetSequenceNum returns a sequence number.
	GetSequenceNum(ctx context.Context, in *GetSequenceNumRequest, opts ...grpc.CallOption) (*GetSequenceNumResponse, error)
	// PutSequenceNum put a sequence number back to pool.
	PutSequenceNum(ctx context.Context, in *PutSequenceNumRequest, opts ...grpc.CallOption) (*PutSequenceNumResponse, error)
}

type numberServerClient struct {
	cc grpc.ClientConnInterface
}

func NewNumberServerClient(cc grpc.ClientConnInterface) NumberServerClient {
	return &numberServerClient{cc}
}

func (c *numberServerClient) GetSequenceNum(ctx context.Context, in *GetSequenceNumRequest, opts ...grpc.CallOption) (*GetSequenceNumResponse, error) {
	out := new(GetSequenceNumResponse)
	err := c.cc.Invoke(ctx, "/ns.NumberServer/GetSequenceNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *numberServerClient) PutSequenceNum(ctx context.Context, in *PutSequenceNumRequest, opts ...grpc.CallOption) (*PutSequenceNumResponse, error) {
	out := new(PutSequenceNumResponse)
	err := c.cc.Invoke(ctx, "/ns.NumberServer/PutSequenceNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NumberServerServer is the server API for NumberServer service.
// All implementations should embed UnimplementedNumberServerServer
// for forward compatibility
type NumberServerServer interface {
	// GetSequenceNum returns a sequence number.
	GetSequenceNum(context.Context, *GetSequenceNumRequest) (*GetSequenceNumResponse, error)
	// PutSequenceNum put a sequence number back to pool.
	PutSequenceNum(context.Context, *PutSequenceNumRequest) (*PutSequenceNumResponse, error)
}

// UnimplementedNumberServerServer should be embedded to have forward compatible implementations.
type UnimplementedNumberServerServer struct {
}

func (UnimplementedNumberServerServer) GetSequenceNum(context.Context, *GetSequenceNumRequest) (*GetSequenceNumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSequenceNum not implemented")
}
func (UnimplementedNumberServerServer) PutSequenceNum(context.Context, *PutSequenceNumRequest) (*PutSequenceNumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutSequenceNum not implemented")
}

// UnsafeNumberServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NumberServerServer will
// result in compilation errors.
type UnsafeNumberServerServer interface {
	mustEmbedUnimplementedNumberServerServer()
}

func RegisterNumberServerServer(s grpc.ServiceRegistrar, srv NumberServerServer) {
	s.RegisterService(&NumberServer_ServiceDesc, srv)
}

func _NumberServer_GetSequenceNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSequenceNumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumberServerServer).GetSequenceNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NumberServer/GetSequenceNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumberServerServer).GetSequenceNum(ctx, req.(*GetSequenceNumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NumberServer_PutSequenceNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutSequenceNumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumberServerServer).PutSequenceNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NumberServer/PutSequenceNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumberServerServer).PutSequenceNum(ctx, req.(*PutSequenceNumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NumberServer_ServiceDesc is the grpc.ServiceDesc for NumberServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NumberServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ns.NumberServer",
	HandlerType: (*NumberServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSequenceNum",
			Handler:    _NumberServer_GetSequenceNum_Handler,
		},
		{
			MethodName: "PutSequenceNum",
			Handler:    _NumberServer_PutSequenceNum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ns.proto",
}
